name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    name: Build ${{ matrix.variant }} for ${{ matrix.rid }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Lite variants
          - os: ubuntu-latest
            rid: linux-x64
            variant: lite
            archive_type: tar.gz
          - os: windows-latest
            rid: win-x64
            variant: lite
            archive_type: zip
          - os: macos-latest
            rid: osx-x64
            variant: lite
            archive_type: tar.gz
          - os: macos-latest
            rid: osx-arm64
            variant: lite
            archive_type: tar.gz
          # Full variants
          - os: ubuntu-latest
            rid: linux-x64
            variant: full
            archive_type: tar.gz
          - os: windows-latest
            rid: win-x64
            variant: full
            archive_type: zip
          - os: macos-latest
            rid: osx-x64
            variant: full
            archive_type: tar.gz
          - os: macos-latest
            rid: osx-arm64
            variant: full
            archive_type: tar.gz

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore src/LinqPadCompiler.csproj

    - name: Build single variant for platform
      run: |
        # Set variables
        PLATFORM="${{ matrix.rid }}"
        VARIANT="${{ matrix.variant }}"
        DOTNET_VERSION="8.0.413"
        
        # Create output directory
        mkdir -p dist
        
        # Build the LinqPadCompiler executable
        dotnet publish src/LinqPadCompiler.csproj \
          -c Release \
          -r ${{ matrix.rid }} \
          --self-contained true \
          -p:PublishSingleFile=true \
          -p:PublishTrimmed=true \
          -p:TrimMode=link \
          -p:IncludeNativeLibrariesForSelfExtract=true \
          -o "./dist/${VARIANT}-${PLATFORM}"
        
        # Rename executable
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          mv "./dist/${VARIANT}-${PLATFORM}/LinqPadCompiler.exe" "./dist/${VARIANT}-${PLATFORM}/linqpadcompiler.exe"
          EXEC_NAME="linqpadcompiler.exe"
        else
          mv "./dist/${VARIANT}-${PLATFORM}/LinqPadCompiler" "./dist/${VARIANT}-${PLATFORM}/linqpadcompiler"
          EXEC_NAME="linqpadcompiler"
        fi
        
        # For full variant, download and bundle .NET SDK
        if [[ "$VARIANT" == "full" ]]; then
          echo "Bundling .NET SDK for full variant..."
          
          # Determine SDK URL
          case "${PLATFORM}" in
            linux-x64) SDK_URL="https://builds.dotnet.microsoft.com/dotnet/Sdk/${DOTNET_VERSION}/dotnet-sdk-${DOTNET_VERSION}-linux-x64.tar.gz" ;;
            win-x64) SDK_URL="https://builds.dotnet.microsoft.com/dotnet/Sdk/${DOTNET_VERSION}/dotnet-sdk-${DOTNET_VERSION}-win-x64.zip" ;;
            osx-x64) SDK_URL="https://builds.dotnet.microsoft.com/dotnet/Sdk/${DOTNET_VERSION}/dotnet-sdk-${DOTNET_VERSION}-osx-x64.tar.gz" ;;
            osx-arm64) SDK_URL="https://builds.dotnet.microsoft.com/dotnet/Sdk/${DOTNET_VERSION}/dotnet-sdk-${DOTNET_VERSION}-osx-arm64.tar.gz" ;;
          esac
          
          # Download SDK
          mkdir -p sdk-temp
          if [[ "${PLATFORM}" == win-* ]]; then
            curl -fsSL "$SDK_URL" -o sdk-temp/dotnet-sdk.zip
            cd sdk-temp && unzip -q dotnet-sdk.zip && rm dotnet-sdk.zip
          else
            curl -fsSL "$SDK_URL" -o sdk-temp/dotnet-sdk.tar.gz
            cd sdk-temp && tar -xzf dotnet-sdk.tar.gz && rm dotnet-sdk.tar.gz
          fi
          cd ..
          
          # Copy SDK to output
          mkdir -p "./dist/${VARIANT}-${PLATFORM}/dotnet"
          cp -r sdk-temp/* "./dist/${VARIANT}-${PLATFORM}/dotnet/"
          
          # Create wrapper scripts
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Windows wrapper
            cat > "./dist/${VARIANT}-${PLATFORM}/linqpadcompiler-wrapper.bat" << 'EOF'
        @echo off
        set DOTNET_ROOT=%~dp0dotnet
        set PATH=%DOTNET_ROOT%;%PATH%
        "%~dp0linqpadcompiler-bin.exe" %*
        EOF
            mv "./dist/${VARIANT}-${PLATFORM}/linqpadcompiler.exe" "./dist/${VARIANT}-${PLATFORM}/linqpadcompiler-bin.exe"
            mv "./dist/${VARIANT}-${PLATFORM}/linqpadcompiler-wrapper.bat" "./dist/${VARIANT}-${PLATFORM}/linqpadcompiler.bat"
          else
            # Unix wrapper
            cat > "./dist/${VARIANT}-${PLATFORM}/linqpadcompiler-wrapper" << 'EOF'
        #!/bin/bash
        SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
        export DOTNET_ROOT="$SCRIPT_DIR/dotnet"
        export PATH="$DOTNET_ROOT:$PATH"
        exec "$SCRIPT_DIR/linqpadcompiler-bin" "$@"
        EOF
            chmod +x "./dist/${VARIANT}-${PLATFORM}/linqpadcompiler-wrapper"
            mv "./dist/${VARIANT}-${PLATFORM}/linqpadcompiler" "./dist/${VARIANT}-${PLATFORM}/linqpadcompiler-bin"
            mv "./dist/${VARIANT}-${PLATFORM}/linqpadcompiler-wrapper" "./dist/${VARIANT}-${PLATFORM}/linqpadcompiler"
          fi
          
          # Clean up
          rm -rf sdk-temp
        fi
        
        # Create archive
        cd dist
        if [[ "${{ matrix.archive_type }}" == "zip" ]]; then
          7z a "linqpadcompiler-${VARIANT}-${PLATFORM}.zip" "${VARIANT}-${PLATFORM}/"
        else
          tar -czf "linqpadcompiler-${VARIANT}-${PLATFORM}.tar.gz" "${VARIANT}-${PLATFORM}/"
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: linqpadcompiler-${{ matrix.variant }}-${{ matrix.rid }}
        path: dist/linqpadcompiler-${{ matrix.variant }}-${{ matrix.rid }}.*

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Display structure of downloaded files
      run: ls -R ./artifacts

    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: LinqPadCompiler ${{ steps.get_version.outputs.version }}
        body: |
          ## LinqPadCompiler ${{ steps.get_version.outputs.version }}

          ### Installation

          **Quick Install (Auto-detects variant):**
          ```bash
          curl -fsSL https://raw.githubusercontent.com/mattjcowan/LinqPadCompiler/main/install.sh | bash
          ```

          **Choose Specific Variant:**
          ```bash
          # For users with .NET SDK installed (~10MB download)
          curl -fsSL https://raw.githubusercontent.com/mattjcowan/LinqPadCompiler/main/install.sh | bash -s -- --variant=lite
          
          # For users without .NET SDK (~200MB download, fully self-contained)
          curl -fsSL https://raw.githubusercontent.com/mattjcowan/LinqPadCompiler/main/install.sh | bash -s -- --variant=full
          ```

          ### Two Variants Available

          | Variant | Size | Requirements | Use Case |
          |---------|------|--------------|----------|
          | **Lite** | ~10MB | .NET SDK required on target | Developers, CI/CD |
          | **Full** | ~200MB | No dependencies | Production, clean environments |

          ### Usage
          ```bash
          linqpadcompiler --linq-file script.linq --output-dir ./output --create
          linqpadcompiler --linq-file script.linq --output-dir ./output --output-type SingleFileDll
          ```

          ### Changes
          - Added dual-variant distribution (lite/full)
          - Full variant includes bundled .NET SDK
          - Both variants support identical functionality

        draft: false
        prerelease: false

    # Upload Lite variants
    - name: Upload Linux x64 Lite
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/linqpadcompiler-lite-linux-x64/linqpadcompiler-lite-linux-x64.tar.gz
        asset_name: linqpadcompiler-lite-linux-x64.tar.gz
        asset_content_type: application/gzip

    - name: Upload Windows x64 Lite
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/linqpadcompiler-lite-win-x64/linqpadcompiler-lite-win-x64.zip
        asset_name: linqpadcompiler-lite-win-x64.zip
        asset_content_type: application/zip

    - name: Upload macOS x64 Lite
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/linqpadcompiler-lite-osx-x64/linqpadcompiler-lite-osx-x64.tar.gz
        asset_name: linqpadcompiler-lite-osx-x64.tar.gz
        asset_content_type: application/gzip

    - name: Upload macOS ARM64 Lite
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/linqpadcompiler-lite-osx-arm64/linqpadcompiler-lite-osx-arm64.tar.gz
        asset_name: linqpadcompiler-lite-osx-arm64.tar.gz
        asset_content_type: application/gzip

    # Upload Full variants
    - name: Upload Linux x64 Full
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/linqpadcompiler-full-linux-x64/linqpadcompiler-full-linux-x64.tar.gz
        asset_name: linqpadcompiler-full-linux-x64.tar.gz
        asset_content_type: application/gzip

    - name: Upload Windows x64 Full
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/linqpadcompiler-full-win-x64/linqpadcompiler-full-win-x64.zip
        asset_name: linqpadcompiler-full-win-x64.zip
        asset_content_type: application/zip

    - name: Upload macOS x64 Full
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/linqpadcompiler-full-osx-x64/linqpadcompiler-full-osx-x64.tar.gz
        asset_name: linqpadcompiler-full-osx-x64.tar.gz
        asset_content_type: application/gzip

    - name: Upload macOS ARM64 Full
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/linqpadcompiler-full-osx-arm64/linqpadcompiler-full-osx-arm64.tar.gz
        asset_name: linqpadcompiler-full-osx-arm64.tar.gz
        asset_content_type: application/gzip